import 'package:flutter/material.dart';
import '../models/stock.dart';
import '../data/storage_helper.dart';

class AddStockScreen extends StatefulWidget {
  final String month;
  final Stock? stockToEdit;
  final int? stockIndex;

  const AddStockScreen({
    super.key,
    required this.month,
    this.stockToEdit,
    this.stockIndex,
  });

  @override
  State<AddStockScreen> createState() => _AddStockScreenState();
}

class _AddStockScreenState extends State<AddStockScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController dateController;
  late TextEditingController nameController;
  late TextEditingController buyPriceController;
  late TextEditingController sellPriceController;
  late TextEditingController taxController;

  @override
  void initState() {
    super.initState();
    final stock = widget.stockToEdit;
    dateController = TextEditingController(text: stock?.date ?? '');
    nameController = TextEditingController(text: stock?.name ?? '');
    buyPriceController = TextEditingController(text: stock?.buyPrice.toString() ?? '');
    sellPriceController = TextEditingController(text: stock?.sellPrice?.toString() ?? '');
    taxController = TextEditingController(text: stock?.tax.toString() ?? '');
  }

  @override
  void dispose() {
    dateController.dispose();
    nameController.dispose();
    buyPriceController.dispose();
    sellPriceController.dispose();
    taxController.dispose();
    super.dispose();
  }

  Future<void> saveStock() async {
    if (!_formKey.currentState!.validate()) return;

    final stock = Stock(
      date: dateController.text,
      name: nameController.text,
      buyPrice: double.parse(buyPriceController.text),
      sellPrice: sellPriceController.text.isEmpty ? null : double.parse(sellPriceController.text),
      tax: double.parse(taxController.text),
    );

    final stocks = await StorageHelper.loadStocks(widget.month);

    if (widget.stockToEdit != null && widget.stockIndex != null) {
      stocks[widget.stockIndex!] = stock;
    } else {
      stocks.add(stock);
    }

    await StorageHelper.saveStocks(widget.month, stocks);
    Navigator.pop(context, true);
  }

  Widget buildTextField(TextEditingController controller, String label, {bool isNumber = false, bool isOptional = false}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: TextFormField(
        controller: controller,
        keyboardType: isNumber ? TextInputType.number : TextInputType.text,
        decoration: InputDecoration(labelText: label, border: const OutlineInputBorder()),
        validator: (value) {
          if (isOptional) {
            // الحقل اختياري، فارغ مقبول
            return null;
          }
          if (value == null || value.isEmpty) {
            return 'هذا الحقل مطلوب';
          }
          return null;
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.stockToEdit != null;

    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        appBar: AppBar(title: Text(isEditing ? 'تعديل سهم' : 'إضافة سهم')),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: Form(
            key: _formKey,
            child: ListView(
              children: [
                buildTextField(dateController, 'تاريخ الشراء'),
                buildTextField(nameController, 'اسم السهم'),
                buildTextField(buyPriceController, 'سعر الشراء', isNumber: true),
                buildTextField(sellPriceController, 'سعر البيع (اختياري)', isNumber: true, isOptional: true),
                buildTextField(taxController, 'السعر الضريبي', isNumber: true),
                const SizedBox(height: 20),
                ElevatedButton(
                  onPressed: saveStock,
                  child: Text(isEditing ? 'تحديث' : 'حفظ'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
